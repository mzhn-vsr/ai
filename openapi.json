{"openapi":"3.1.0","info":{"title":"FastAPI","version":"0.1.0"},"paths":{"/faiss/add":{"put":{"summary":"Add To Faiss","operationId":"add_to_faiss_faiss_add_put","requestBody":{"content":{"application/json":{"schema":{"items":{"$ref":"#/components/schemas/DocumentInput"},"type":"array","title":"Documents"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/faiss/delete":{"delete":{"summary":"Delete From Faiss","operationId":"delete_from_faiss_faiss_delete_delete","requestBody":{"content":{"application/json":{"schema":{"items":{"type":"string"},"type":"array","title":"Ids"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/input_schema":{"get":{"tags":["chat"],"summary":"Chat Input Schema","description":"Return the input schema.","operationId":"chat_input_schema_chat_input_schema_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/chat/c/{config_hash}/input_schema":{"get":{"tags":["chat/config"],"summary":"Chat Input Schema With Config","description":"Return the input schema.","operationId":"chat_input_schema_with_config_chat_c__config_hash__input_schema_get","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/output_schema":{"get":{"tags":["chat"],"summary":"Chat Output Schema","description":"Return the output schema.","operationId":"chat_output_schema_chat_output_schema_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/chat/c/{config_hash}/output_schema":{"get":{"tags":["chat/config"],"summary":"Chat Output Schema With Config","description":"Return the output schema.","operationId":"chat_output_schema_with_config_chat_c__config_hash__output_schema_get","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/config_schema":{"get":{"tags":["chat"],"summary":"Chat Config Schema","description":"Return the config schema.","operationId":"chat_config_schema_chat_config_schema_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/chat/c/{config_hash}/config_schema":{"get":{"tags":["chat/config"],"summary":"Chat Config Schema With Config","description":"Return the config schema.","operationId":"chat_config_schema_with_config_chat_c__config_hash__config_schema_get","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/token_feedback":{"post":{"summary":"Create Feedback From Token","description":"Send feedback on an individual run to langsmith.","operationId":"create_feedback_from_token_chat_token_feedback_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FeedbackCreateRequestTokenBased"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/invoke":{"post":{"tags":["chat"],"summary":"Chat Invoke","description":"Invoke the runnable with the given input and config.","operationId":"chat_invoke_chat_invoke_post","parameters":[{"name":"config_hash","in":"query","required":false,"schema":{"type":"string","default":"","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatInvokeRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatInvokeResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/c/{config_hash}/invoke":{"post":{"tags":["chat/config"],"summary":"Chat Invoke With Config","description":"This endpoint is to be used with share links generated by the LangServe playground. The hash is an LZString compressed JSON string. For regular use cases, use the /invoke endpoint without the `c/{config_hash}` path parameter.","operationId":"chat_invoke_with_config_chat_c__config_hash__invoke_post","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatInvokeRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatInvokeResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/batch":{"post":{"tags":["chat"],"summary":"Chat Batch","description":"Batch invoke the runnable with the given inputs and config.","operationId":"chat_batch_chat_batch_post","parameters":[{"name":"config_hash","in":"query","required":false,"schema":{"type":"string","default":"","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatBatchRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatBatchResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/c/{config_hash}/batch":{"post":{"tags":["chat/config"],"summary":"Chat Batch With Config","description":"This endpoint is to be used with share links generated by the LangServe playground. The hash is an LZString compressed JSON string. For regular use cases, use the /batch endpoint without the `c/{config_hash}` path parameter.","operationId":"chat_batch_with_config_chat_c__config_hash__batch_post","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatBatchRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatBatchResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/stream":{"post":{"tags":["chat"],"summary":"Chat Stream","description":"This endpoint allows to stream the output of the runnable. The endpoint uses a server sent event stream to stream the output. https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events","operationId":"chat_stream_chat_stream_post","parameters":[{"name":"config_hash","in":"query","required":false,"schema":{"type":"string","default":"","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatStreamRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/c/{config_hash}/stream":{"post":{"tags":["chat/config"],"summary":"Chat Stream With Config","description":"This endpoint is to be used with share links generated by the LangServe playground. The hash is an LZString compressed JSON string. For regular use cases, use the /stream endpoint without the `c/{config_hash}` path parameter.","operationId":"chat_stream_with_config_chat_c__config_hash__stream_post","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatStreamRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/stream_log":{"post":{"tags":["chat"],"summary":"Chat Stream Log","description":"Invoke the runnable stream_log the output.\n\nThis endpoint allows to stream the output of the runnable, including\nthe output of all intermediate steps.\n\nThe endpoint uses a server sent event stream to stream the output.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events\n\nImportant: Set the \"text/event-stream\" media type for request headers if\n           not using an existing SDK.\n\nThis endpoint uses two different types of events:\n\n* data - for streaming the output of the runnable\n\n    {\n        \"event\": \"data\",\n        \"data\": {\n        ...\n        }\n    }\n\n* error - for signaling an error in the stream, also ends the stream.\n\n{\n    \"event\": \"error\",\n    \"data\": {\n        \"status_code\": 500,\n        \"message\": \"Internal Server Error\"\n    }\n}\n\n* end - for signaling the end of the stream.\n\n    This helps the client to know when to stop listening for events and\n    know that the streaming has ended successfully.\n\n    {\n        \"event\": \"end\",\n    }","operationId":"chat_stream_log_chat_stream_log_post","parameters":[{"name":"config_hash","in":"query","required":false,"schema":{"type":"string","default":"","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatStreamLogRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/c/{config_hash}/stream_log":{"post":{"tags":["chat/config"],"summary":"Chat Stream Log With Config","description":"This endpoint is to be used with share links generated by the LangServe playground. The hash is an LZString compressed JSON string. For regular use cases, use the /stream_log endpoint without the `c/{config_hash}` path parameter.","operationId":"chat_stream_log_with_config_chat_c__config_hash__stream_log_post","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatStreamLogRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/stream_events":{"post":{"tags":["chat"],"summary":"Chat Stream Events","description":"Stream events from the given runnable.\n\nThis endpoint allows to stream events from the runnable, including\nevents from all intermediate steps.\n\n**Attention**\n\n    This is a new endpoint that only works for langchain-core >= 0.1.14.\n\n    It belongs to a Beta API that may change in the future.\n\n**Important**\n    Specify filters to the events you want to receive by setting\n    the appropriate filters in the request body.\n\n    This will help avoid sending too much data over the network.\n\n    It will also prevent serialization issues with\n    any unsupported types since it won't need to serialize events\n    that aren't transmitted.\n\nThe endpoint uses a server sent event stream to stream the output.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events\n\nThe encoding of events follows the following format:\n\n* data - for streaming the output of the runnable\n\n    {\n        \"event\": \"data\",\n        \"data\": {\n        ...\n        }\n    }\n\n* error - for signaling an error in the stream, also ends the stream.\n\n{\n    \"event\": \"error\",\n    \"data\": {\n        \"status_code\": 500,\n        \"message\": \"Internal Server Error\"\n    }\n}\n\n* end - for signaling the end of the stream.\n\n    This helps the client to know when to stop listening for events and\n    know that the streaming has ended successfully.\n\n    {\n        \"event\": \"end\",\n    }\n\n`data` for the `data` event is a JSON object that corresponds\nto a serialized representation of a StreamEvent.\n\nSee LangChain documentation for more information about astream_events.","operationId":"chat_stream_events_chat_stream_events_post","parameters":[{"name":"config_hash","in":"query","required":false,"schema":{"type":"string","default":"","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatStreamEventsRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/chat/c/{config_hash}/stream_events":{"post":{"tags":["chat/config"],"summary":"Chat Stream Events With Config","description":"This endpoint is to be used with share links generated by the LangServe playground. The hash is an LZString compressed JSON string. For regular use cases, use the /stream_events endpoint without the `c/{config_hash}` path parameter.","operationId":"chat_stream_events_with_config_chat_c__config_hash__stream_events_post","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/chatStreamEventsRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/input_schema":{"get":{"tags":["classifier"],"summary":"Classifier Input Schema","description":"Return the input schema.","operationId":"classifier_input_schema_classifier_input_schema_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/classifier/c/{config_hash}/input_schema":{"get":{"tags":["classifier/config"],"summary":"Classifier Input Schema With Config","description":"Return the input schema.","operationId":"classifier_input_schema_with_config_classifier_c__config_hash__input_schema_get","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/output_schema":{"get":{"tags":["classifier"],"summary":"Classifier Output Schema","description":"Return the output schema.","operationId":"classifier_output_schema_classifier_output_schema_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/classifier/c/{config_hash}/output_schema":{"get":{"tags":["classifier/config"],"summary":"Classifier Output Schema With Config","description":"Return the output schema.","operationId":"classifier_output_schema_with_config_classifier_c__config_hash__output_schema_get","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/config_schema":{"get":{"tags":["classifier"],"summary":"Classifier Config Schema","description":"Return the config schema.","operationId":"classifier_config_schema_classifier_config_schema_get","responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}}}}},"/classifier/c/{config_hash}/config_schema":{"get":{"tags":["classifier/config"],"summary":"Classifier Config Schema With Config","description":"Return the config schema.","operationId":"classifier_config_schema_with_config_classifier_c__config_hash__config_schema_get","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/token_feedback":{"post":{"summary":"Create Feedback From Token","description":"Send feedback on an individual run to langsmith.","operationId":"create_feedback_from_token_classifier_token_feedback_post","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/FeedbackCreateRequestTokenBased"}}},"required":true},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/invoke":{"post":{"tags":["classifier"],"summary":"Classifier Invoke","description":"Invoke the runnable with the given input and config.","operationId":"classifier_invoke_classifier_invoke_post","parameters":[{"name":"config_hash","in":"query","required":false,"schema":{"type":"string","default":"","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierInvokeRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierInvokeResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/c/{config_hash}/invoke":{"post":{"tags":["classifier/config"],"summary":"Classifier Invoke With Config","description":"This endpoint is to be used with share links generated by the LangServe playground. The hash is an LZString compressed JSON string. For regular use cases, use the /invoke endpoint without the `c/{config_hash}` path parameter.","operationId":"classifier_invoke_with_config_classifier_c__config_hash__invoke_post","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierInvokeRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierInvokeResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/batch":{"post":{"tags":["classifier"],"summary":"Classifier Batch","description":"Batch invoke the runnable with the given inputs and config.","operationId":"classifier_batch_classifier_batch_post","parameters":[{"name":"config_hash","in":"query","required":false,"schema":{"type":"string","default":"","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierBatchRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierBatchResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/c/{config_hash}/batch":{"post":{"tags":["classifier/config"],"summary":"Classifier Batch With Config","description":"This endpoint is to be used with share links generated by the LangServe playground. The hash is an LZString compressed JSON string. For regular use cases, use the /batch endpoint without the `c/{config_hash}` path parameter.","operationId":"classifier_batch_with_config_classifier_c__config_hash__batch_post","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierBatchRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierBatchResponse"}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/stream":{"post":{"tags":["classifier"],"summary":"Classifier Stream","description":"This endpoint allows to stream the output of the runnable. The endpoint uses a server sent event stream to stream the output. https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events","operationId":"classifier_stream_classifier_stream_post","parameters":[{"name":"config_hash","in":"query","required":false,"schema":{"type":"string","default":"","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierStreamRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/c/{config_hash}/stream":{"post":{"tags":["classifier/config"],"summary":"Classifier Stream With Config","description":"This endpoint is to be used with share links generated by the LangServe playground. The hash is an LZString compressed JSON string. For regular use cases, use the /stream endpoint without the `c/{config_hash}` path parameter.","operationId":"classifier_stream_with_config_classifier_c__config_hash__stream_post","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierStreamRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/stream_log":{"post":{"tags":["classifier"],"summary":"Classifier Stream Log","description":"Invoke the runnable stream_log the output.\n\nThis endpoint allows to stream the output of the runnable, including\nthe output of all intermediate steps.\n\nThe endpoint uses a server sent event stream to stream the output.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events\n\nImportant: Set the \"text/event-stream\" media type for request headers if\n           not using an existing SDK.\n\nThis endpoint uses two different types of events:\n\n* data - for streaming the output of the runnable\n\n    {\n        \"event\": \"data\",\n        \"data\": {\n        ...\n        }\n    }\n\n* error - for signaling an error in the stream, also ends the stream.\n\n{\n    \"event\": \"error\",\n    \"data\": {\n        \"status_code\": 500,\n        \"message\": \"Internal Server Error\"\n    }\n}\n\n* end - for signaling the end of the stream.\n\n    This helps the client to know when to stop listening for events and\n    know that the streaming has ended successfully.\n\n    {\n        \"event\": \"end\",\n    }","operationId":"classifier_stream_log_classifier_stream_log_post","parameters":[{"name":"config_hash","in":"query","required":false,"schema":{"type":"string","default":"","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierStreamLogRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/c/{config_hash}/stream_log":{"post":{"tags":["classifier/config"],"summary":"Classifier Stream Log With Config","description":"This endpoint is to be used with share links generated by the LangServe playground. The hash is an LZString compressed JSON string. For regular use cases, use the /stream_log endpoint without the `c/{config_hash}` path parameter.","operationId":"classifier_stream_log_with_config_classifier_c__config_hash__stream_log_post","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierStreamLogRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/stream_events":{"post":{"tags":["classifier"],"summary":"Classifier Stream Events","description":"Stream events from the given runnable.\n\nThis endpoint allows to stream events from the runnable, including\nevents from all intermediate steps.\n\n**Attention**\n\n    This is a new endpoint that only works for langchain-core >= 0.1.14.\n\n    It belongs to a Beta API that may change in the future.\n\n**Important**\n    Specify filters to the events you want to receive by setting\n    the appropriate filters in the request body.\n\n    This will help avoid sending too much data over the network.\n\n    It will also prevent serialization issues with\n    any unsupported types since it won't need to serialize events\n    that aren't transmitted.\n\nThe endpoint uses a server sent event stream to stream the output.\n\nhttps://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events\n\nThe encoding of events follows the following format:\n\n* data - for streaming the output of the runnable\n\n    {\n        \"event\": \"data\",\n        \"data\": {\n        ...\n        }\n    }\n\n* error - for signaling an error in the stream, also ends the stream.\n\n{\n    \"event\": \"error\",\n    \"data\": {\n        \"status_code\": 500,\n        \"message\": \"Internal Server Error\"\n    }\n}\n\n* end - for signaling the end of the stream.\n\n    This helps the client to know when to stop listening for events and\n    know that the streaming has ended successfully.\n\n    {\n        \"event\": \"end\",\n    }\n\n`data` for the `data` event is a JSON object that corresponds\nto a serialized representation of a StreamEvent.\n\nSee LangChain documentation for more information about astream_events.","operationId":"classifier_stream_events_classifier_stream_events_post","parameters":[{"name":"config_hash","in":"query","required":false,"schema":{"type":"string","default":"","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierStreamEventsRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}},"/classifier/c/{config_hash}/stream_events":{"post":{"tags":["classifier/config"],"summary":"Classifier Stream Events With Config","description":"This endpoint is to be used with share links generated by the LangServe playground. The hash is an LZString compressed JSON string. For regular use cases, use the /stream_events endpoint without the `c/{config_hash}` path parameter.","operationId":"classifier_stream_events_with_config_classifier_c__config_hash__stream_events_post","parameters":[{"name":"config_hash","in":"path","required":true,"schema":{"type":"string","title":"Config Hash"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/classifierStreamEventsRequest"}}}},"responses":{"200":{"description":"Successful Response","content":{"application/json":{"schema":{}}}},"422":{"description":"Validation Error","content":{"application/json":{"schema":{"$ref":"#/components/schemas/HTTPValidationError"}}}}}}}},"components":{"schemas":{"AIMessage":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["ai"],"const":"ai","title":"Type","default":"ai"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"example":{"type":"boolean","title":"Example","default":false},"tool_calls":{"items":{"$ref":"#/components/schemas/ToolCall"},"type":"array","title":"Tool Calls","default":[]},"invalid_tool_calls":{"items":{"$ref":"#/components/schemas/InvalidToolCall"},"type":"array","title":"Invalid Tool Calls","default":[]},"usage_metadata":{"anyOf":[{"$ref":"#/components/schemas/UsageMetadata"},{"type":"null"}]}},"additionalProperties":true,"type":"object","required":["content"],"title":"AIMessage","description":"Message from an AI.\n\nAIMessage is returned from a chat model as a response to a prompt.\n\nThis message represents the output of the model and consists of both\nthe raw output as returned by the model together standardized fields\n(e.g., tool calls, usage metadata) added by the LangChain framework."},"AIMessageChunk":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["AIMessageChunk"],"const":"AIMessageChunk","title":"Type","default":"AIMessageChunk"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"example":{"type":"boolean","title":"Example","default":false},"tool_calls":{"items":{"$ref":"#/components/schemas/ToolCall"},"type":"array","title":"Tool Calls","default":[]},"invalid_tool_calls":{"items":{"$ref":"#/components/schemas/InvalidToolCall"},"type":"array","title":"Invalid Tool Calls","default":[]},"usage_metadata":{"anyOf":[{"$ref":"#/components/schemas/UsageMetadata"},{"type":"null"}]},"tool_call_chunks":{"items":{"$ref":"#/components/schemas/ToolCallChunk"},"type":"array","title":"Tool Call Chunks","default":[]}},"additionalProperties":true,"type":"object","required":["content"],"title":"AIMessageChunk","description":"Message chunk from an AI."},"BatchResponseMetadata":{"properties":{"responses":{"items":{"$ref":"#/components/schemas/InvokeResponseMetadata"},"type":"array","title":"Responses"},"run_ids":{"items":{"type":"string","format":"uuid"},"type":"array","title":"Run Ids"}},"type":"object","required":["responses","run_ids"],"title":"BatchResponseMetadata","description":"Represents response metadata used for batches of input/output LangServe\nresponses."},"ChatMessage":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["chat"],"const":"chat","title":"Type","default":"chat"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"role":{"type":"string","title":"Role"}},"additionalProperties":true,"type":"object","required":["content","role"],"title":"ChatMessage","description":"Message that can be assigned an arbitrary speaker (i.e. role)."},"ChatMessageChunk":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["ChatMessageChunk"],"const":"ChatMessageChunk","title":"Type","default":"ChatMessageChunk"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"role":{"type":"string","title":"Role"}},"additionalProperties":true,"type":"object","required":["content","role"],"title":"ChatMessageChunk","description":"Chat Message chunk."},"ChatOllamaOutput":{"oneOf":[{"$ref":"#/components/schemas/AIMessage"},{"$ref":"#/components/schemas/HumanMessage"},{"$ref":"#/components/schemas/ChatMessage"},{"$ref":"#/components/schemas/SystemMessage"},{"$ref":"#/components/schemas/FunctionMessage"},{"$ref":"#/components/schemas/ToolMessage"},{"$ref":"#/components/schemas/AIMessageChunk"},{"$ref":"#/components/schemas/HumanMessageChunk"},{"$ref":"#/components/schemas/ChatMessageChunk"},{"$ref":"#/components/schemas/SystemMessageChunk"},{"$ref":"#/components/schemas/FunctionMessageChunk"},{"$ref":"#/components/schemas/ToolMessageChunk"}],"title":"ChatOllamaOutput"},"DocumentInput":{"properties":{"id":{"type":"string","title":"Id"},"question":{"type":"string","title":"Question"},"answer":{"type":"string","title":"Answer"},"classifier1":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Classifier1"},"classifier2":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Classifier2"}},"type":"object","required":["id","question","answer"],"title":"DocumentInput"},"FeedbackCreateRequestTokenBased":{"properties":{"token_or_url":{"anyOf":[{"type":"string","format":"uuid"},{"type":"string"}],"title":"Token Or Url"},"score":{"anyOf":[{"type":"number"},{"type":"integer"},{"type":"boolean"},{"type":"null"}],"title":"Score"},"value":{"anyOf":[{"type":"number"},{"type":"integer"},{"type":"boolean"},{"type":"string"},{"type":"object"},{"type":"null"}],"title":"Value"},"comment":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Comment"},"correction":{"anyOf":[{"type":"object"},{"type":"null"}],"title":"Correction"},"metadata":{"anyOf":[{"type":"object"},{"type":"null"}],"title":"Metadata"}},"type":"object","required":["token_or_url"],"title":"FeedbackCreateRequestTokenBased","description":"Shared information between create requests of feedback and feedback objects."},"FeedbackToken":{"properties":{"key":{"type":"string","title":"Key"},"token_url":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Token Url"},"expires_at":{"anyOf":[{"type":"string","format":"date-time"},{"type":"null"}],"title":"Expires At"}},"type":"object","required":["key"],"title":"FeedbackToken","description":"Represents the feedback tokens for a given request."},"FunctionMessage":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["function"],"const":"function","title":"Type","default":"function"},"name":{"type":"string","title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"}},"additionalProperties":true,"type":"object","required":["content","name"],"title":"FunctionMessage","description":"Message for passing the result of executing a tool back to a model.\n\nFunctionMessage are an older version of the ToolMessage schema, and\ndo not contain the tool_call_id field.\n\nThe tool_call_id field is used to associate the tool call request with the\ntool call response. This is useful in situations where a chat model is able\nto request multiple tool calls in parallel."},"FunctionMessageChunk":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["FunctionMessageChunk"],"const":"FunctionMessageChunk","title":"Type","default":"FunctionMessageChunk"},"name":{"type":"string","title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"}},"additionalProperties":true,"type":"object","required":["content","name"],"title":"FunctionMessageChunk","description":"Function Message chunk."},"HTTPValidationError":{"properties":{"detail":{"items":{"$ref":"#/components/schemas/ValidationError"},"type":"array","title":"Detail"}},"type":"object","title":"HTTPValidationError"},"HumanMessage":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["human"],"const":"human","title":"Type","default":"human"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"example":{"type":"boolean","title":"Example","default":false}},"additionalProperties":true,"type":"object","required":["content"],"title":"HumanMessage","description":"Message from a human.\n\nHumanMessages are messages that are passed in from a human to the model.\n\nExample:\n\n    .. code-block:: python\n\n        from langchain_core.messages import HumanMessage, SystemMessage\n\n        messages = [\n            SystemMessage(\n                content=\"You are a helpful assistant! Your name is Bob.\"\n            ),\n            HumanMessage(\n                content=\"What is your name?\"\n            )\n        ]\n\n        # Instantiate a chat model and invoke it with the messages\n        model = ...\n        print(model.invoke(messages))"},"HumanMessageChunk":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["HumanMessageChunk"],"const":"HumanMessageChunk","title":"Type","default":"HumanMessageChunk"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"example":{"type":"boolean","title":"Example","default":false}},"additionalProperties":true,"type":"object","required":["content"],"title":"HumanMessageChunk","description":"Human Message chunk."},"InvalidToolCall":{"properties":{"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"args":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Args"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"error":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Error"},"type":{"type":"string","enum":["invalid_tool_call"],"const":"invalid_tool_call","title":"Type"}},"type":"object","required":["name","args","id","error"],"title":"InvalidToolCall","description":"Allowance for errors made by LLM.\n\nHere we add an `error` key to surface errors made during generation\n(e.g., invalid JSON arguments.)"},"InvokeResponseMetadata":{"properties":{"run_id":{"type":"string","format":"uuid","title":"Run Id"},"feedback_tokens":{"items":{"$ref":"#/components/schemas/FeedbackToken"},"type":"array","title":"Feedback Tokens","description":"Feedback tokens from the given run.These tokens allow a user to provide feedback on the run.Only available if server was configured to provide feedback tokens."}},"type":"object","required":["run_id","feedback_tokens"],"title":"InvokeResponseMetadata","description":"Represents response metadata used for just single input/output LangServe\nresponses."},"JsonOutputParserOutput":{"title":"JsonOutputParserOutput"},"RunnableParallel_context_input_Input":{"type":"string","title":"RunnableParallel<context,input>Input"},"SystemMessage":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["system"],"const":"system","title":"Type","default":"system"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"}},"additionalProperties":true,"type":"object","required":["content"],"title":"SystemMessage","description":"Message for priming AI behavior.\n\nThe system message is usually passed in as the first of a sequence\nof input messages.\n\nExample:\n\n    .. code-block:: python\n\n        from langchain_core.messages import HumanMessage, SystemMessage\n\n        messages = [\n            SystemMessage(\n                content=\"You are a helpful assistant! Your name is Bob.\"\n            ),\n            HumanMessage(\n                content=\"What is your name?\"\n            )\n        ]\n\n        # Define a chat model and invoke it with the messages\n        print(model.invoke(messages))"},"SystemMessageChunk":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["SystemMessageChunk"],"const":"SystemMessageChunk","title":"Type","default":"SystemMessageChunk"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"}},"additionalProperties":true,"type":"object","required":["content"],"title":"SystemMessageChunk","description":"System Message chunk."},"ToolCall":{"properties":{"name":{"type":"string","title":"Name"},"args":{"type":"object","title":"Args"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"type":{"type":"string","enum":["tool_call"],"const":"tool_call","title":"Type"}},"type":"object","required":["name","args","id"],"title":"ToolCall","description":"Represents a request to call a tool.\n\nExample:\n\n    .. code-block:: python\n\n        {\n            \"name\": \"foo\",\n            \"args\": {\"a\": 1},\n            \"id\": \"123\"\n        }\n\n    This represents a request to call the tool named \"foo\" with arguments {\"a\": 1}\n    and an identifier of \"123\"."},"ToolCallChunk":{"properties":{"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"args":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Args"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"index":{"anyOf":[{"type":"integer"},{"type":"null"}],"title":"Index"},"type":{"type":"string","enum":["tool_call_chunk"],"const":"tool_call_chunk","title":"Type"}},"type":"object","required":["name","args","id","index"],"title":"ToolCallChunk","description":"A chunk of a tool call (e.g., as part of a stream).\n\nWhen merging ToolCallChunks (e.g., via AIMessageChunk.__add__),\nall string attributes are concatenated. Chunks are only merged if their\nvalues of `index` are equal and not None.\n\nExample:\n\n.. code-block:: python\n\n    left_chunks = [ToolCallChunk(name=\"foo\", args='{\"a\":', index=0)]\n    right_chunks = [ToolCallChunk(name=None, args='1}', index=0)]\n\n    (\n        AIMessageChunk(content=\"\", tool_call_chunks=left_chunks)\n        + AIMessageChunk(content=\"\", tool_call_chunks=right_chunks)\n    ).tool_call_chunks == [ToolCallChunk(name='foo', args='{\"a\":1}', index=0)]"},"ToolMessage":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["tool"],"const":"tool","title":"Type","default":"tool"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"tool_call_id":{"type":"string","title":"Tool Call Id"},"artifact":{"title":"Artifact"},"status":{"type":"string","enum":["success","error"],"title":"Status","default":"success"}},"additionalProperties":true,"type":"object","required":["content","tool_call_id"],"title":"ToolMessage","description":"Message for passing the result of executing a tool back to a model.\n\nToolMessages contain the result of a tool invocation. Typically, the result\nis encoded inside the `content` field.\n\nExample: A ToolMessage representing a result of 42 from a tool call with id\n\n    .. code-block:: python\n\n        from langchain_core.messages import ToolMessage\n\n        ToolMessage(content='42', tool_call_id='call_Jja7J89XsjrOLA5r!MEOW!SL')\n\n\nExample: A ToolMessage where only part of the tool output is sent to the model\n    and the full output is passed in to artifact.\n\n    .. versionadded:: 0.2.17\n\n    .. code-block:: python\n\n        from langchain_core.messages import ToolMessage\n\n        tool_output = {\n            \"stdout\": \"From the graph we can see that the correlation between x and y is ...\",\n            \"stderr\": None,\n            \"artifacts\": {\"type\": \"image\", \"base64_data\": \"/9j/4gIcSU...\"},\n        }\n\n        ToolMessage(\n            content=tool_output[\"stdout\"],\n            artifact=tool_output,\n            tool_call_id='call_Jja7J89XsjrOLA5r!MEOW!SL',\n        )\n\nThe tool_call_id field is used to associate the tool call request with the\ntool call response. This is useful in situations where a chat model is able\nto request multiple tool calls in parallel."},"ToolMessageChunk":{"properties":{"content":{"anyOf":[{"type":"string"},{"items":{"anyOf":[{"type":"string"},{"type":"object"}]},"type":"array"}],"title":"Content"},"additional_kwargs":{"type":"object","title":"Additional Kwargs"},"response_metadata":{"type":"object","title":"Response Metadata"},"type":{"type":"string","enum":["ToolMessageChunk"],"const":"ToolMessageChunk","title":"Type","default":"ToolMessageChunk"},"name":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Name"},"id":{"anyOf":[{"type":"string"},{"type":"null"}],"title":"Id"},"tool_call_id":{"type":"string","title":"Tool Call Id"},"artifact":{"title":"Artifact"},"status":{"type":"string","enum":["success","error"],"title":"Status","default":"success"}},"additionalProperties":true,"type":"object","required":["content","tool_call_id"],"title":"ToolMessageChunk","description":"Tool Message chunk."},"UsageMetadata":{"properties":{"input_tokens":{"type":"integer","title":"Input Tokens"},"output_tokens":{"type":"integer","title":"Output Tokens"},"total_tokens":{"type":"integer","title":"Total Tokens"}},"type":"object","required":["input_tokens","output_tokens","total_tokens"],"title":"UsageMetadata","description":"Usage metadata for a message, such as token counts.\n\nThis is a standard representation of token usage that is consistent across models.\n\nExample:\n\n    .. code-block:: python\n\n        {\n            \"input_tokens\": 10,\n            \"output_tokens\": 20,\n            \"total_tokens\": 30\n        }"},"ValidationError":{"properties":{"loc":{"items":{"anyOf":[{"type":"string"},{"type":"integer"}]},"type":"array","title":"Location"},"msg":{"type":"string","title":"Message"},"type":{"type":"string","title":"Error Type"}},"type":"object","required":["loc","msg","type"],"title":"ValidationError"},"chatBatchRequest":{"properties":{"inputs":{"items":{"$ref":"#/components/schemas/RunnableParallel_context_input_Input"},"type":"array","title":"Inputs"},"config":{"anyOf":[{"$ref":"#/components/schemas/chatRunnableSequenceConfig"},{"items":{"$ref":"#/components/schemas/chatRunnableSequenceConfig"},"type":"array"}],"title":"Config","description":"Subset of RunnableConfig object in LangChain. Either specify one config for all inputs or a list of configs with one per input. Useful for passing information like tags, metadata etc."},"kwargs":{"type":"object","title":"Kwargs","description":"Keyword arguments to the runnable. Currently ignored."}},"type":"object","required":["inputs"],"title":"chatBatchRequest"},"chatBatchResponse":{"properties":{"output":{"items":{"$ref":"#/components/schemas/ChatOllamaOutput"},"type":"array","title":"Output","description":"The outputs corresponding to the inputs the batch request."},"metadata":{"$ref":"#/components/schemas/BatchResponseMetadata","description":"Metadata about the response that may be useful to specific clients"}},"type":"object","required":["output","metadata"],"title":"chatBatchResponse"},"chatInvokeRequest":{"properties":{"input":{"$ref":"#/components/schemas/RunnableParallel_context_input_Input","description":"The input to the runnable."},"config":{"$ref":"#/components/schemas/chatRunnableSequenceConfig","description":"Subset of RunnableConfig object in LangChain. Useful for passing information like tags, metadata etc."},"kwargs":{"type":"object","title":"Kwargs","description":"Keyword arguments to the runnable. Currently ignored."}},"type":"object","required":["input"],"title":"chatInvokeRequest"},"chatInvokeResponse":{"properties":{"output":{"$ref":"#/components/schemas/ChatOllamaOutput","description":"The output of the invocation."},"metadata":{"$ref":"#/components/schemas/InvokeResponseMetadata","description":"Metadata about the response that may be useful to specific clients"}},"type":"object","required":["output","metadata"],"title":"chatInvokeResponse"},"chatRunnableSequenceConfig":{"properties":{},"type":"object","title":"chatRunnableSequenceConfig"},"chatStreamEventsRequest":{"properties":{"input":{"$ref":"#/components/schemas/RunnableParallel_context_input_Input"},"config":{"$ref":"#/components/schemas/chatRunnableSequenceConfig"},"include_names":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Names","description":"If specified, filter to runnables with matching names"},"include_types":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Types","description":"If specified, filter to runnables with matching types"},"include_tags":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Tags","description":"If specified, filter to runnables with matching tags"},"exclude_names":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Names","description":"If specified, exclude runnables with matching names"},"exclude_types":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Types","description":"If specified, exclude runnables with matching types"},"exclude_tags":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Tags","description":"If specified, exclude runnables with matching tags"},"kwargs":{"type":"object","title":"Kwargs"}},"type":"object","required":["input"],"title":"chatStreamEventsRequest"},"chatStreamLogRequest":{"properties":{"input":{"$ref":"#/components/schemas/RunnableParallel_context_input_Input"},"config":{"$ref":"#/components/schemas/chatRunnableSequenceConfig"},"include_names":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Names","description":"If specified, filter to runnables with matching names"},"include_types":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Types","description":"If specified, filter to runnables with matching types"},"include_tags":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Tags","description":"If specified, filter to runnables with matching tags"},"exclude_names":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Names","description":"If specified, exclude runnables with matching names"},"exclude_types":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Types","description":"If specified, exclude runnables with matching types"},"exclude_tags":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Tags","description":"If specified, exclude runnables with matching tags"},"kwargs":{"type":"object","title":"Kwargs"}},"type":"object","required":["input"],"title":"chatStreamLogRequest"},"chatStreamRequest":{"properties":{"input":{"$ref":"#/components/schemas/RunnableParallel_context_input_Input","description":"The input to the runnable."},"config":{"$ref":"#/components/schemas/chatRunnableSequenceConfig","description":"Subset of RunnableConfig object in LangChain. Useful for passing information like tags, metadata etc."},"kwargs":{"type":"object","title":"Kwargs","description":"Keyword arguments to the runnable. Currently ignored."}},"type":"object","required":["input"],"title":"chatStreamRequest"},"classifierBatchRequest":{"properties":{"inputs":{"items":{"$ref":"#/components/schemas/RunnableParallel_context_input_Input"},"type":"array","title":"Inputs"},"config":{"anyOf":[{"$ref":"#/components/schemas/classifierRunnableSequenceConfig"},{"items":{"$ref":"#/components/schemas/classifierRunnableSequenceConfig"},"type":"array"}],"title":"Config","description":"Subset of RunnableConfig object in LangChain. Either specify one config for all inputs or a list of configs with one per input. Useful for passing information like tags, metadata etc."},"kwargs":{"type":"object","title":"Kwargs","description":"Keyword arguments to the runnable. Currently ignored."}},"type":"object","required":["inputs"],"title":"classifierBatchRequest"},"classifierBatchResponse":{"properties":{"output":{"items":{"$ref":"#/components/schemas/JsonOutputParserOutput"},"type":"array","title":"Output","description":"The outputs corresponding to the inputs the batch request."},"metadata":{"$ref":"#/components/schemas/BatchResponseMetadata","description":"Metadata about the response that may be useful to specific clients"}},"type":"object","required":["output","metadata"],"title":"classifierBatchResponse"},"classifierInvokeRequest":{"properties":{"input":{"$ref":"#/components/schemas/RunnableParallel_context_input_Input","description":"The input to the runnable."},"config":{"$ref":"#/components/schemas/classifierRunnableSequenceConfig","description":"Subset of RunnableConfig object in LangChain. Useful for passing information like tags, metadata etc."},"kwargs":{"type":"object","title":"Kwargs","description":"Keyword arguments to the runnable. Currently ignored."}},"type":"object","required":["input"],"title":"classifierInvokeRequest"},"classifierInvokeResponse":{"properties":{"output":{"$ref":"#/components/schemas/JsonOutputParserOutput","description":"The output of the invocation."},"metadata":{"$ref":"#/components/schemas/InvokeResponseMetadata","description":"Metadata about the response that may be useful to specific clients"}},"type":"object","required":["output","metadata"],"title":"classifierInvokeResponse"},"classifierRunnableSequenceConfig":{"properties":{},"type":"object","title":"classifierRunnableSequenceConfig"},"classifierStreamEventsRequest":{"properties":{"input":{"$ref":"#/components/schemas/RunnableParallel_context_input_Input"},"config":{"$ref":"#/components/schemas/classifierRunnableSequenceConfig"},"include_names":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Names","description":"If specified, filter to runnables with matching names"},"include_types":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Types","description":"If specified, filter to runnables with matching types"},"include_tags":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Tags","description":"If specified, filter to runnables with matching tags"},"exclude_names":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Names","description":"If specified, exclude runnables with matching names"},"exclude_types":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Types","description":"If specified, exclude runnables with matching types"},"exclude_tags":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Tags","description":"If specified, exclude runnables with matching tags"},"kwargs":{"type":"object","title":"Kwargs"}},"type":"object","required":["input"],"title":"classifierStreamEventsRequest"},"classifierStreamLogRequest":{"properties":{"input":{"$ref":"#/components/schemas/RunnableParallel_context_input_Input"},"config":{"$ref":"#/components/schemas/classifierRunnableSequenceConfig"},"include_names":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Names","description":"If specified, filter to runnables with matching names"},"include_types":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Types","description":"If specified, filter to runnables with matching types"},"include_tags":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Include Tags","description":"If specified, filter to runnables with matching tags"},"exclude_names":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Names","description":"If specified, exclude runnables with matching names"},"exclude_types":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Types","description":"If specified, exclude runnables with matching types"},"exclude_tags":{"anyOf":[{"items":{"type":"string"},"type":"array"},{"type":"null"}],"title":"Exclude Tags","description":"If specified, exclude runnables with matching tags"},"kwargs":{"type":"object","title":"Kwargs"}},"type":"object","required":["input"],"title":"classifierStreamLogRequest"},"classifierStreamRequest":{"properties":{"input":{"$ref":"#/components/schemas/RunnableParallel_context_input_Input","description":"The input to the runnable."},"config":{"$ref":"#/components/schemas/classifierRunnableSequenceConfig","description":"Subset of RunnableConfig object in LangChain. Useful for passing information like tags, metadata etc."},"kwargs":{"type":"object","title":"Kwargs","description":"Keyword arguments to the runnable. Currently ignored."}},"type":"object","required":["input"],"title":"classifierStreamRequest"}}},"tags":[{"name":"chat"},{"name":"chat/config","description":"Endpoints with a default configuration set by `config_hash` path parameter. Used in conjunction with share links generated using the LangServe UI playground. The hash is an LZString compressed JSON string."},{"name":"classifier"},{"name":"classifier/config","description":"Endpoints with a default configuration set by `config_hash` path parameter. Used in conjunction with share links generated using the LangServe UI playground. The hash is an LZString compressed JSON string."}]}